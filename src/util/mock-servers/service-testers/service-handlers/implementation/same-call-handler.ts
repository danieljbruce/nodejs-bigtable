// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import {MockService} from '../../../mock-service';
import {ServiceHandler} from '../service-handler';
import {Row} from '../../../../../row';

const equal = require('deep-equal');

export abstract class SameCallHandler extends ServiceHandler {
  service: MockService;
  request: any = null;
  requestList: any[] = [];
  requestOrder: number[] = [];
  callCount = 0;
  endpoint: string;
  data: Row[][] = [];

  protected constructor(service: MockService, endpoint: string) {
    super();
    this.endpoint = endpoint;
    this.service = service;
  }

  setupService(): void {
    const handleRpcCall = (call: any) => {
      // TODO: Make an abstraction of this
      const callRequest = call.request;
      const requestIndex = this.requestList.findIndex(request => {
        return equal(request, callRequest);
      });
      if (requestIndex === -1) {
        this.requestList.push(callRequest);
        this.requestOrder.push(this.requestList.length - 1);
      } else {
        this.requestOrder.push(requestIndex);
      }
      this.request = callRequest;
      this.callCount++;
      this.data.push([]);
      this.callHandler(call);
    };
    this.service.setService({
      // Abstraction: Always emit error
      [this.endpoint]: handleRpcCall,
    });
  }

  getData() {
    return this.data;
  }

  requests() {
    return {
      data: this.data,
      requests: Object.assign({}, this.requestList),
      requestOrder: this.requestOrder,
      callCount: this.callCount,
    };
  }
}
