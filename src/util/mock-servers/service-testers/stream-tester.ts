// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import {ServiceHandler} from './service-handlers/service-handler';
import {StreamFetcher} from './stream-fetchers/stream-fetcher';
import {ServiceError} from 'google-gax';

import * as snapshot from 'snap-shot-it';
import {Row} from '../../../row';

export class StreamTester {
  serviceHandler: ServiceHandler;
  streamFetcher: StreamFetcher;

  constructor(serviceHandler: ServiceHandler, streamFetcher: StreamFetcher) {
    this.serviceHandler = serviceHandler;
    this.streamFetcher = streamFetcher;
  }

  checkSnapshots(callback: () => void): void {
    const collectSnapshot = (results: any) => {
      snapshot(this.serviceHandler.snapshot(results));
    };
    const getData = (result: string) => {
      return {
        result,
        data: this.serviceHandler.getData(),
      };
    };
    this.serviceHandler.setupService();
    const fetchedStream = this.streamFetcher.fetchStream();
    fetchedStream
      .on('error', (error: ServiceError) => {
        console.log('error received');
        collectSnapshot(getData('error'));
        callback();
      })
      .on('data', (message: Row) => {
        console.log('data received');
        this.serviceHandler.addData(message.id);
      });
    // TODO: Find a meaningful way to test stream ending
    // TODO: We need to find a way to trigger the end of the test or errors
    // after a certain amount of data has been sent back
  }
}
