// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import {before, describe, it} from 'mocha';
import {Bigtable} from '../src';
import * as v2 from '../src/v2';
import {PassThrough} from 'stream';
import * as assert from 'assert';
import jsonProtos = require('../protos/protos.json');
import grpc = require('@grpc/grpc-js');
import protoLoader = require('@grpc/proto-loader');
import {GoogleError} from 'google-gax';

describe('Bigtable/Grpc-mock', () => {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const packageDefinition = protoLoader.fromJSON(jsonProtos, {
    keepCase: true,
    longs: String,
    enums: String,
    defaults: true,
    oneofs: true,
  });
  const errorDetails =
    'Table not found: projects/my-project/instances/my-instance/tables/my-table';
  const readRows = (stream: any) => {
    stream.emit('error', {
      code: 5,
      details: errorDetails,
    });
  };
  const proto = grpc.loadPackageDefinition(packageDefinition);
  const server = new grpc.Server();
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const service = proto.google.bigtable.v2.Bigtable.service;

  before(async () => {
    server.addService(service, {
      ReadRows: readRows,
    });
    server.bindAsync(
      'localhost:1234',
      grpc.ServerCredentials.createInsecure(),
      () => {
        server.start();
      }
    );
  });

  it('should produce human readable error when passing through gax', done => {
    const bigtable = new Bigtable({apiEndpoint: 'localhost:1234'});
    const clientConfig = 'BigtableClient';
    const gaxClient = new v2[clientConfig]({});
    const stream = new PassThrough({objectMode: true});
    gaxClient.innerApiCalls.readRows = () => {
      return stream;
    };
    const table = bigtable.instance('fake-instance').table('fake-table');
    const readStream = table.createReadStream({});
    readStream.on('error', (err: GoogleError) => {
      const {code, statusDetails, message} = err;
      assert.strictEqual(statusDetails, errorDetails);
      assert.strictEqual(code, 5);
      assert.strictEqual(
        message,
        '5 NOT_FOUND: Table not found: projects/my-project/instances/my-instance/tables/my-table'
      );
      done();
    });
  });
});
